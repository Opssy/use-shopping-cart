{"expireTime":9007200841407263000,"key":"gatsby-plugin-mdx-entire-payload-a98bcbaf997abdcc654b4f24b565bf75-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"To add an item to the cart, use ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":33,"offset":32},"indent":[]}},{"type":"inlineCode","value":"addItem()","position":{"start":{"line":1,"column":33,"offset":32},"end":{"line":1,"column":44,"offset":43},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":44,"offset":43},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"/**@jsx jsx */\nimport { jsx, Box, Image, Button, Flex } from 'theme-ui';\nimport { useStripeCart } from 'use-stripe-cart';\nimport { toCurrency } from '../util';\n\n/**\n * PRODUCT DATA COMING FROM PROPS\nconst fakeData = [\n  {\n    name: 'Bananas',\n    sku: 'sku_GBJ2Ep8246qeeT',\n    price: 400,\n    image: 'https://www.fillmurray.com/300/300',\n    currency: 'USD',\n  },\n  {\n    name: 'Tangerines',\n    sku: 'sku_GBJ2WWfMaGNC2Z',\n    price: 100,\n    image: 'https://www.fillmurray.com/300/300',\n    currency: 'USD',\n  },\n];\n*/\n\nconst Product = product => {\n  const { addItem } = useStripeCart();\n  const { name, sku, price, image, currency } = product;\n  return (\n    <Flex\n      sx={{\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Image src={image} />\n      <Box>\n        <p>{name}</p>\n        <p>{toCurrency({ price: price, currency })}</p>\n      </Box>\n      <Button onClick={() => addItem({ ...product })} backgroundColor={'black'}>\n        Add To Cart\n      </Button>\n    </Flex>\n  );\n};","position":{"start":{"line":3,"column":1,"offset":45},"end":{"line":51,"column":4,"offset":1115},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"addItem()\"}","position":{"start":{"line":53,"column":1,"offset":1117},"end":{"line":53,"column":50,"offset":1166},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":53,"column":50,"offset":1166}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"addItem()\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To add an item to the cart, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addItem()\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"/**@jsx jsx */\\nimport { jsx, Box, Image, Button, Flex } from 'theme-ui';\\nimport { useStripeCart } from 'use-stripe-cart';\\nimport { toCurrency } from '../util';\\n\\n/**\\n * PRODUCT DATA COMING FROM PROPS\\nconst fakeData = [\\n  {\\n    name: 'Bananas',\\n    sku: 'sku_GBJ2Ep8246qeeT',\\n    price: 400,\\n    image: 'https://www.fillmurray.com/300/300',\\n    currency: 'USD',\\n  },\\n  {\\n    name: 'Tangerines',\\n    sku: 'sku_GBJ2WWfMaGNC2Z',\\n    price: 100,\\n    image: 'https://www.fillmurray.com/300/300',\\n    currency: 'USD',\\n  },\\n];\\n*/\\n\\nconst Product = product => {\\n  const { addItem } = useStripeCart();\\n  const { name, sku, price, image, currency } = product;\\n  return (\\n    <Flex\\n      sx={{\\n        flexDirection: 'column',\\n        justifyContent: 'center',\\n        alignItems: 'center',\\n      }}\\n    >\\n      <Image src={image} />\\n      <Box>\\n        <p>{name}</p>\\n        <p>{toCurrency({ price: price, currency })}</p>\\n      </Box>\\n      <Button onClick={() => addItem({ ...product })} backgroundColor={'black'}>\\n        Add To Cart\\n      </Button>\\n    </Flex>\\n  );\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"addItem()\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`To add an item to the cart, use `}<inlineCode parentName=\"p\">{`addItem()`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`/**@jsx jsx */\nimport { jsx, Box, Image, Button, Flex } from 'theme-ui';\nimport { useStripeCart } from 'use-stripe-cart';\nimport { toCurrency } from '../util';\n\n/**\n * PRODUCT DATA COMING FROM PROPS\nconst fakeData = [\n  {\n    name: 'Bananas',\n    sku: 'sku_GBJ2Ep8246qeeT',\n    price: 400,\n    image: 'https://www.fillmurray.com/300/300',\n    currency: 'USD',\n  },\n  {\n    name: 'Tangerines',\n    sku: 'sku_GBJ2WWfMaGNC2Z',\n    price: 100,\n    image: 'https://www.fillmurray.com/300/300',\n    currency: 'USD',\n  },\n];\n*/\n\nconst Product = product => {\n  const { addItem } = useStripeCart();\n  const { name, sku, price, image, currency } = product;\n  return (\n    <Flex\n      sx={{\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Image src={image} />\n      <Box>\n        <p>{name}</p>\n        <p>{toCurrency({ price: price, currency })}</p>\n      </Box>\n      <Button onClick={() => addItem({ ...product })} backgroundColor={'black'}>\n        Add To Cart\n      </Button>\n    </Flex>\n  );\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}