{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/usage/cartprovider/","result":{"data":{"mdx":{"id":"9919b0c7-1ded-5678-83a9-7fa1daf2c00d","excerpt":"CheckoutSession mode Creating a  CheckoutSession  server-side allows for a more flexible and powerful integration but requires a server component (e.g. aâ€¦","fields":{"slug":"/usage/cartprovider/"},"frontmatter":{"title":"CartProvider","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CartProvider\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"checkoutsession-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#checkoutsession-mode\",\n    \"aria-label\": \"checkoutsession mode permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"CheckoutSession mode\"), mdx(\"p\", null, \"Creating a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stripe.com/docs/payments/checkout/one-time#create-checkout-session\"\n  }), \"CheckoutSession\"), \" server-side allows for a more flexible and powerful integration but requires a server component (e.g. a Netlify Function).\"), mdx(\"p\", null, \"At the root level of your app, wrap your Root app in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CartProvider />\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import ReactDOM from 'react-dom'\\n\\nimport { loadStripe } from '@stripe/stripe-js'\\nimport { CartProvider } from 'use-shopping-cart'\\n\\nimport App from './App'\\n\\n// Remember to add your public Stripe key\\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_API_PUBLIC)\\n\\nReactDOM.render(\\n  <CartProvider stripe={stripePromise} currency=\\\"USD\\\">\\n    <App />\\n  </CartProvider>,\\n  document.getElementById('root')\\n)\\n\")), mdx(\"p\", null, \"When using CheckoutSessions your product object must adhere to the following shape:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const products = [\\n  {\\n    // Line item name to be shown on the Stripe Checkout page\\n    name: 'Bananas',\\n    // Optional description to be shown on the Stripe Checkout page\\n    description: 'Yummy yellow fruit',\\n    // A unique identifier for this item (stock keeping unit)\\n    sku: 'sku_banana001',\\n    // price in smallest currency unit (e.g. cent for USD)\\n    price: 400,\\n    currency: 'USD',\\n    // Optional image to be shown on the Stripe Checkout page\\n    image: 'https://my-image.com/image.jpg',\\n  },\\n]\\n\")), mdx(\"p\", null, \"Additionally, you must verify the cartItems on the server-side before creating the CheckoutSession. For this you can use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/usage/validateCartItems()\"\n  }), \"validateCartItems() helper\"), \".\"), mdx(\"h2\", {\n    \"id\": \"client-only-checkout-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#client-only-checkout-mode\",\n    \"aria-label\": \"client only checkout mode permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Client-only Checkout mode\"), mdx(\"p\", null, \"To operate a checkout page without any server component you need to enable client-only checkout mode and insert your porudct information in your Stripe Dashboard:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stripe.com/docs/payments/checkout/client#enable-checkout\"\n  }), \"Enable client-only Checkout\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stripe.com/docs/payments/checkout/client#create-products\"\n  }), \"Create your products\"))), mdx(\"p\", null, \"At the root level of your app, wrap your Root app in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CartProvider />\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import ReactDOM from 'react-dom'\\n\\nimport { loadStripe } from '@stripe/stripe-js'\\nimport { CartProvider } from 'use-shopping-cart'\\n\\nimport App from './App'\\n\\n// Remember to add your public Stripe key\\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_API_PUBLIC)\\n\\nReactDOM.render(\\n  <CartProvider\\n    stripe={stripePromise}\\n    // The URL to which Stripe should send customers when payment is complete.\\n    successUrl=\\\"http://localhost:3000/success\\\"\\n    // The URL to which Stripe should send customers when payment is canceled.\\n    cancelUrl=\\\"http://localhost:3000\\\"\\n    currency=\\\"USD\\\"\\n    // https://stripe.com/docs/payments/checkout/client#collect-shipping-address\\n    allowedCountries={['US', 'GB', 'CA']}\\n    // https://stripe.com/docs/payments/checkout/client#collect-billing-address\\n    billingAddressCollection={true}\\n  >\\n    <App />\\n  </CartProvider>,\\n  document.getElementById('root')\\n)\\n\")), mdx(\"p\", null, \"When operating in client-only mode you must set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"successUrl\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cancelUrl\"), \" props on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CartProvider\"), \" component, and the product object must adhere to the following shape:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const products = [\\n  {\\n    name: 'Bananas',\\n    // sku ID from your Stripe Dashboard\\n    sku: 'sku_GBJ2Ep8246qeeT',\\n    // price in smallest currency unit (e.g. cent for USD)\\n    price: 400,\\n    currency: 'USD',\\n    // Optional image to be shown on the Stripe Checkout page\\n    image: 'https://my-image.com/image.jpg',\\n  },\\n]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"CheckoutSession mode"},{"depth":2,"value":"Client-only Checkout mode"}]}},"pageContext":{"slug":"/usage/cartprovider/","prev":{"label":"Getting started","link":"/getting-started"},"next":{"label":"addItem()","link":"/usage/addItem()"},"githubEditUrl":"https:/github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/usage/cartprovider.mdx"}}}