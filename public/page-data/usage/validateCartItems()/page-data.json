{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/usage/validateCartItems()/","result":{"data":{"mdx":{"id":"3713b434-858b-5027-bd8f-08dcb345b2df","excerpt":"validateCartItems(inventory, cartItems) validateCartItems checks the items in the current cart and compares them with a source of truth to\nmake sure that theâ€¦","fields":{"slug":"/usage/validateCartItems()/"},"frontmatter":{"title":"validateCartItems","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"validateCartItems\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validateCartItems(inventory, cartItems)\")), mdx(\"p\", null, \"validateCartItems checks the items in the current cart and compares them with a source of truth to\\nmake sure that the prices and quantities are correct. This is necessary because it's possible that\\nmalicious users could manipulate the values of prices in the DOM before sending to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redirectToCheckout\")), mdx(\"p\", null, \"inventory: Source of truth. This should be the object of products you sell. It can come from anywhere that\\nis secure. An API call, or a json file that sits on a server.\"), mdx(\"p\", null, \"cartItems: the cartItems that comes from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use-shopping-cart\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const stripe = require('stripe')(process.env.REACT_APP_STRIPE_API_SECRET)\\nconst validateCartItems = require('use-shopping-cart/src/serverUtil')\\n  .validateCartItems\\n\\n/*\\n * Product data can be loaded from anywhere. In this case, we\\u2019re loading it from\\n * a local JSON file, but this could also come from an async call to your\\n * inventory management service, a database query, or some other API call.\\n *\\n * The important thing is that the product info is loaded from somewhere trusted\\n * so you know the pricing information is accurate.\\n */\\nconst inventory = require('./data/products.json')\\n\\nexports.handler = async (event) => {\\n  try {\\n    const cartItems = JSON.parse(event.body)\\n\\n    const line_items = validateCartItems(inventory, cartItems)\\n\\n    const session = await stripe.checkout.sessions.create({\\n      payment_method_types: ['card'],\\n      billing_address_collection: 'auto',\\n      shipping_address_collection: {\\n        allowed_countries: ['US', 'CA'],\\n      },\\n\\n      /*\\n       * This env var is set by Netlify and inserts the live site URL. If you want\\n       * to use a different URL, you can hard-code it here or check out the\\n       * other environment variables Netlify exposes:\\n       * https://docs.netlify.com/configure-builds/environment-variables/\\n       */\\n      success_url: `${process.env.URL}/success.html`,\\n      cancel_url: process.env.URL,\\n      line_items,\\n    })\\n\\n    return {\\n      statusCode: 200,\\n      body: JSON.stringify({ sessionId: session.id }),\\n    }\\n  } catch (error) {\\n    console.error(error)\\n  }\\n}\\n\")), mdx(\"p\", null, \"Take a look at the Netlify example here:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/dayhaysoos/use-shopping-cart/blob/master/examples/cra/functions/create-session.js\"\n  }), \"https://github.com/dayhaysoos/use-shopping-cart/blob/master/examples/cra/functions/create-session.js\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/usage/validateCartItems()/","prev":{"label":"redirectToCheckout()","link":"/usage/redirectToCheckout()"},"next":{"label":"API","link":"/usage/api"},"githubEditUrl":"https:/github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/usage/validateCartItems().mdx"}}}